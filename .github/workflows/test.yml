name: Test

on:
  workflow_call:
    secrets:
      OPENAI_API_KEY:
        required: false
      COHERE_API_KEY:
        required: false
      CODECOV_TOKEN:
        required: false
    inputs:
      test_scope:
        type: string
        required: false
        default: 'all'
        description: 'Scope of tests to run: all, unit-functional, or specific test type'
      postgres_user:
        type: string
        required: false
        default: 'postgres'
      postgres_password:
        type: string
        required: false
        default: 'postgres'
      postgres_db:
        type: string
        required: false
        default: 'postgres'
      postgres_host:
        type: string
        required: false
        default: 'localhost'
      postgres_port:
        type: number
        required: false
        default: 5432


jobs:
  build:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || '' }}
      COHERE_API_KEY: ${{ secrets.COHERE_API_KEY || '' }}
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      POSTGRES_USER: ${{ inputs.postgres_user }}
      POSTGRES_PASSWORD: ${{ inputs.postgres_password }}
      POSTGRES_DB: ${{ inputs.postgres_db }}
      POSTGRES_HOST: ${{ inputs.postgres_host }}
      POSTGRES_PORT: ${{ inputs.postgres_port }}
    services:
      pinecone:
        image: ghcr.io/pinecone-io/pinecone-local
        env:
          PORT: 5080
          PINECONE_HOST: localhost
        ports:
        - "5080-5430:5080-5430"
      postgres:
        image: pgvector/pgvector:pg17
        env:
          POSTGRES_USER: ${{ inputs.postgres_user }}
          POSTGRES_PASSWORD: ${{ inputs.postgres_password }}
          POSTGRES_DB: ${{ inputs.postgres_db }}
          POSTGRES_HOST: ${{ inputs.postgres_host }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - ${{ inputs.postgres_port }}:5432

    strategy:
      matrix:
        python-version:
        - "3.10"
        - "3.11"
        - "3.12"
        - "3.13"
    steps:
    - uses: actions/checkout@v4
    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies (Essential Only)
      run: uv sync
    - name: Confirm Library Imports
      run: uv run python -c "import semantic_router"
    - name: Install Dependencies (All)
      run: uv sync --extra all
    - name: Install nltk
      run: uv pip install nltk
    - name: Install pytest-timeout
      run: uv pip install pytest-timeout

    - name: Download nltk data
      run: |
        uv run python -m nltk.downloader punkt stopwords wordnet punkt_tab

    - name: Pytest All
      if: ${{ inputs.test_scope == 'all' }}
      env:
        PINECONE_API_KEY: pclocal
        PINECONE_API_BASE_URL: http://localhost:5080
      run: |
        pytest -vv --cov=semantic_router --cov-report=term-missing --cov-report=xml --exitfirst --maxfail=1 --timeout=60
    - name: Pytest Unit and Functional Only
      if: ${{ inputs.test_scope == 'unit-functional' }}
      env:
        PINECONE_API_KEY: pclocal
        PINECONE_API_BASE_URL: http://localhost:5080
      run: |
        pytest -vv --cov=semantic_router --cov-report=term-missing --cov-report=xml --exitfirst --maxfail=1 --timeout=60 -m "unit or functional"
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
